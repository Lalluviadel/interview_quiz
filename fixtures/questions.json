[
{
  "model": "questions.question",
  "pk": 1,
  "fields": {
    "question": "В чем разница между списком и кортежем?",
    "subject": 1,
    "author": "drf",
    "right_answer": "кортеж неизменяемый, список изменяемый",
    "answer_01": "список неизменяемый, кортеж изменяемый",
    "answer_02": "список и кортеж - одно и то же в разных языках программирования",
    "answer_03": "кортеж неизменяемый, список изменяемый",
    "answer_04": "кортеж содержит одинаковые элементы, а список - разные",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список кортеж",
    "image_01": "que_images/Python/В_чем_разница_между_списком_и_кортежем_list_tuple.jpg",
    "image_02": "que_images/Python/В_чем_разница_между_списком_и_кортежем_list_tuple_02.jpg",
    "image_03": "que_images/Python/В_чем_разница_между_списком_и_кортежем_list_tuple_03.jpg"
  }
},
{
  "model": "questions.question",
  "pk": 2,
  "fields": {
    "question": "Сколько основных способов форматирования строк в Python?",
    "subject": 1,
    "author": "drf",
    "right_answer": "три: f-строки, %-оператор, .format()",
    "answer_01": "два: f-строки, %-оператор",
    "answer_02": "три: f-строки, %-оператор, .format()",
    "answer_03": "два: %-оператор, .format()",
    "answer_04": "четыре: f-строки, %-оператор, .format(), интерполяция",
    "difficulty_level": "NB",
    "available": true,
    "tag": "форматирование строк",
    "image_01": "",
    "image_02": "que_images/Python/Сколько_основных_способов_форматирования_строк_в_Python_interpolation.jpg",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 3,
  "fields": {
    "question": "В чем разница между is и ==?",
    "subject": 1,
    "author": "drf",
    "right_answer": "is проверяет идентичность, == проверяет равенство",
    "answer_01": "is проверяет вхождение, == проверяет равенство",
    "answer_02": "is используют для двух объектов, == для трех объектов",
    "answer_03": "разницы нет",
    "answer_04": "is проверяет идентичность, == проверяет равенство",
    "difficulty_level": "NB",
    "available": true,
    "tag": "равенство",
    "image_01": "que_images/Python/В_чем_разница_между_is_и__equal_sign.jpg",
    "image_02": "que_images/Python/В_чем_разница_между_is_и__equal_sign_01.jpg",
    "image_03": "que_images/Python/В_чем_разница_между_is_и__equal_sign_02.jpg"
  }
},
{
  "model": "questions.question",
  "pk": 4,
  "fields": {
    "question": "Все данные в Python - это",
    "subject": 1,
    "author": "drf",
    "right_answer": "объекты",
    "answer_01": "объекты",
    "answer_02": "строки",
    "answer_03": "шестнадцатеричные числа",
    "answer_04": "элементы таблицы",
    "difficulty_level": "NB",
    "available": true,
    "tag": "Python",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 5,
  "fields": {
    "question": "В чем разница между function и function()?",
    "subject": 1,
    "author": "drf",
    "right_answer": "function - объект, представляющий функцию, function() - вызывает функцию и возвращает результат",
    "answer_01": "function - переменная, function() - вызывает функцию и возвращает результат",
    "answer_02": "function - результат функции, передающий значение, function() - вызов функции и сохранение результата",
    "answer_03": "function - атрибут функции, function() - результат функции",
    "answer_04": "function - объект, представляющий функцию, function() - вызывает функцию и возвращает результат",
    "difficulty_level": "NB",
    "available": true,
    "tag": "функция",
    "image_01": "que_images/Python/В_чем_разница_между_function_и_function_function.jpg",
    "image_02": "que_images/Python/В_чем_разница_между_function_и_function_function_02.jpg",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 6,
  "fields": {
    "question": "Что такое декоратор?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Декоратор - паттерн проектирования для дополнения класса или функции без использования наследования или прямого изменения исходного кода.",
    "answer_01": "Декоратор представляет собой коллекцию, которая производит элементы во время выполнения и может повторяться только один раз.",
    "answer_02": "Декоратор - паттерн проектирования для дополнения класса или функции без использования наследования или прямого изменения исходного кода.",
    "answer_03": "Декоратор - это объект, который возвращает свои элементы по одному за раз.",
    "answer_04": "Декоратор - это способ представления данных в виде кода, в котором каждый разряд принимает одно из двух возможных значений.",
    "difficulty_level": "AV",
    "available": true,
    "tag": "декоратор",
    "image_01": "que_images/Python/Что_такое_декоратор_decorator.jpg",
    "image_02": "que_images/Python/Что_такое_декоратор_decorator_01.jpg",
    "image_03": "que_images/Python/Что_такое_декоратор_decorator_02.jpg"
  }
},
{
  "model": "questions.question",
  "pk": 7,
  "fields": {
    "question": "Зачем нужна функция range?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Range генерирует список целых чисел",
    "answer_01": "Range генерирует числа и умножает их на указанное число",
    "answer_02": "Range генерирует список дробных чисел, повторяющихся указанное количество раз",
    "answer_03": "Range генерирует список целых чисел",
    "answer_04": "Range генерирует список дробных чисел",
    "difficulty_level": "NB",
    "available": true,
    "tag": "range",
    "image_01": "que_images/Python/Зачем_нужна_функция_range_range.jpg",
    "image_02": "que_images/Python/Зачем_нужна_функция_range_range_01.jpg",
    "image_03": "que_images/Python/Зачем_нужна_функция_range_range_02.jpg"
  }
},
{
  "model": "questions.question",
  "pk": 8,
  "fields": {
    "question": "Что такое методы экземпляра класса?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Методы экземпляра принимают параметр self и относятся к определенному экземпляру класса.",
    "answer_01": "Методы экземпляра принимают параметр self и относятся к определенному экземпляру класса.",
    "answer_02": "Они используют декоратор @staticmethod, не связаны с конкретным экземпляром и являются автономными",
    "answer_03": "Методы экземпляра принимают параметр cls, можно изменить сам класс.",
    "answer_04": "Методы экземпляра принимают числовые атрибуты экземпляра класса.",
    "difficulty_level": "AV",
    "available": true,
    "tag": "методы",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 9,
  "fields": {
    "question": "Что такое статические методы?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Статические методы используют декоратор @staticmethod, не связаны с конкретным экземпляром и являются автономными.",
    "answer_01": "Статические методы используют декоратор @staticmethod, связаны с конкретным экземпляром",
    "answer_02": "Статические методы принимают параметр cls, можно изменить сам класс.",
    "answer_03": "Статические методы принимают параметр self и относятся к определенному экземпляру класса.",
    "answer_04": "Статические методы используют декоратор @staticmethod, не связаны с конкретным экземпляром и являются автономными.",
    "difficulty_level": "AV",
    "available": true,
    "tag": "методы",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 10,
  "fields": {
    "question": "Что такое методы класса?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Методы класса принимают параметр cls, можно изменить сам класс.",
    "answer_01": "Методы класса используют декоратор @staticmethod, не связаны с конкретным экземпляром.",
    "answer_02": "Методы класса принимают параметр cls, можно изменить сам класс.",
    "answer_03": "Методы класса принимают параметр self и относятся к определенному экземпляру класса.",
    "answer_04": "Методы класса изменяют все созданные ранее статические методы класса.",
    "difficulty_level": "NB",
    "available": true,
    "tag": "методы",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 11,
  "fields": {
    "question": "Что такое полиморфизм?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Возможность модифицировать (переопределять) любой метод любого класса или оператор, за счет чего меняется его поведение.",
    "answer_01": "Возможность создания дочерних классов, которые будут иметь атрибуты родительского.",
    "answer_02": "Ограничение доступа к атрибутам объекта (методам, переменным).",
    "answer_03": "Изменение или удаление всех ранее созданных классов",
    "answer_04": "Возможность модифицировать (переопределять) любой метод любого класса или оператор, за счет чего меняется его поведение.",
    "difficulty_level": "NB",
    "available": true,
    "tag": "ООП",
    "image_01": "",
    "image_02": "Что_такое_полиморфизм_polimorph.jpg",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 12,
  "fields": {
    "question": "Что такое наследование?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Возможность создания дочерних классов, которые будут иметь атрибуты родительского.",
    "answer_01": "Возможность создания дочерних классов, которые будут иметь атрибуты родительского.",
    "answer_02": "Возможность модифицировать (переопределять) любой метод любого класса или оператор, за счет чего меняется его поведение.",
    "answer_03": "Ограничение доступа к атрибутам объекта (методам, переменным).",
    "answer_04": "Ограничение доступа к дочерним объектам класса",
    "difficulty_level": "NB",
    "available": true,
    "tag": "ООП",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 13,
  "fields": {
    "question": "Что такое инкапсуляция?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Ограничение доступа к атрибутам объекта (методам, переменным).",
    "answer_01": "Ограничение доступа к дочерним капсулам класса.",
    "answer_02": "Возможность модифицировать (переопределять) любой метод любого класса или оператор, за счет чего меняется его поведение.",
    "answer_03": "Ограничение доступа к атрибутам объекта (методам, переменным).",
    "answer_04": "Возможность создания дочерних классов, которые будут иметь атрибуты родительского.",
    "difficulty_level": "NB",
    "available": true,
    "tag": "ООП",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 14,
  "fields": {
    "question": "Что такое роутер в REST?",
    "subject": 2,
    "author": "drf",
    "right_answer": "default",
    "answer_01": "Класс для формирования нескольких адресов с началом в одной точке",
    "answer_02": "Набор из нескольких представлений",
    "answer_03": "Класс для создания отдельного лаконичного представления",
    "answer_04": "Объект, куда поступает несколько запросов и представлений",
    "difficulty_level": "NB",
    "available": true,
    "tag": "роутер",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 15,
  "fields": {
    "question": "Основная библиотека для написания и выполнения тестовых кодов на Python",
    "subject": 1,
    "author": "drf",
    "right_answer": "Pytest",
    "answer_01": "MyTest",
    "answer_02": "PythonTest",
    "answer_03": "Pytest",
    "answer_04": "TestPL",
    "difficulty_level": "AV",
    "available": true,
    "tag": "тесты",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 16,
  "fields": {
    "question": "Роль Serializer в архитектуре Django REST",
    "subject": 2,
    "author": "drf",
    "right_answer": "Преобразование сложного объекта в словарь с простыми типами данных и обратно",
    "answer_01": "Сериализация url в удобочитаемый вид",
    "answer_02": "Преобразование состояний на стороне клиента в удобочитаемый вид",
    "answer_03": "Преобразование словарей в подсловари для передачи по протоколу HTTP",
    "answer_04": "Преобразование сложного объекта в словарь с простыми типами данных и обратно",
    "difficulty_level": "NB",
    "available": true,
    "tag": "serializer",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 17,
  "fields": {
    "question": "Используется ли тернарный оператор в Python и JavaScript?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Используется в обоих языках",
    "answer_01": "Только в Python",
    "answer_02": "Только в JavaScript",
    "answer_03": "Используется в обоих языках",
    "answer_04": "Не используется ни в одном из них",
    "difficulty_level": "NB",
    "available": true,
    "tag": "тернарный оператор",
    "image_01": "",
    "image_02": "que_images/Python/Используется_ли_тернарный_оператор_в_Python_и_JavaScript_ternarny.png",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 18,
  "fields": {
    "question": "Какова основная польза генераторов?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Экономия оперативной памяти",
    "answer_01": "Экономия оперативной памяти",
    "answer_02": "Индексируют большие объемы данных в таблице",
    "answer_03": "Хранят объект",
    "answer_04": "Их можно перебирать",
    "difficulty_level": "NB",
    "available": true,
    "tag": "генератор",
    "image_01": "",
    "image_02": "que_images/Python/Какова_основная_польза_генераторов_generator.png",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 19,
  "fields": {
    "question": "Какой метод позволяет получать значения из функции генератора?",
    "subject": 1,
    "author": "drf",
    "right_answer": "next()",
    "answer_01": "add()",
    "answer_02": "get()",
    "answer_03": "next()",
    "answer_04": "gen()",
    "difficulty_level": "NB",
    "available": true,
    "tag": "генератор",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 20,
  "fields": {
    "question": "Что произойдет, если обратиться методом next() к генератору, который уже вернул все элементы последовательности?",
    "subject": 1,
    "author": "drf",
    "right_answer": "Вызов исключения StopIteration",
    "answer_01": "Вызов исключения ValueErro",
    "answer_02": "Вызов исключения TypeError",
    "answer_03": "Вызов исключения StopIteration",
    "answer_04": "Компьютер зависнет",
    "difficulty_level": "NB",
    "available": true,
    "tag": "генератор",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 21,
  "fields": {
    "question": "Какие встроенные типы данных в Python относятся к коллекциям?",
    "subject": 1,
    "author": "drf",
    "right_answer": "список, кортеж, множество, фиксированное множество, словарь",
    "answer_01": "список, кортеж, словарь",
    "answer_02": "список, кортеж, множество, фиксированное множество, упорядоченный словарь, словарь",
    "answer_03": "список, кортеж, множество, фиксированное множество, словарь",
    "answer_04": "список, кортеж, множество, фиксированное множество",
    "difficulty_level": "NB",
    "available": true,
    "tag": "коллекции",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 22,
  "fields": {
    "question": "Зачем нужен метод списка count и что будет выведено на экран?",
    "subject": 1,
    "author": "drf",
    "right_answer": "count считает количество запрашиваемых элементов, будет выведено 2",
    "answer_01": "count возвращает порядковый номер первого элемента в списке, будет выведено 0",
    "answer_02": "count возвращает порядковый номер первого элемента в списке, будет выведено 1",
    "answer_03": "count один раз посчитает количество элементов в списке, будет выведено 6",
    "answer_04": "count считает количество запрашиваемых элементов, будет выведено 2",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 23,
  "fields": {
    "question": "Какой метод служит для добавления элемента в список?",
    "subject": 1,
    "author": "drf",
    "right_answer": "метод append()",
    "answer_01": "метод extend()",
    "answer_02": "метод pop()",
    "answer_03": "метод append()",
    "answer_04": "метод post()",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 24,
  "fields": {
    "question": "Для чего нужен метод списка extend()?",
    "subject": 1,
    "author": "drf",
    "right_answer": "дополняет один список элементами другого",
    "answer_01": "дополняет один список элементами другого",
    "answer_02": "оба списка дополняются элементами друг друга",
    "answer_03": "заменяет элементы одного списка элементами другого",
    "answer_04": "создает вложенный список внутри первого списка",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 25,
  "fields": {
    "question": "Какой результат будет выведен на экран, если запросить элемент списка с индексом 1?",
    "subject": 1,
    "author": "drf",
    "right_answer": "будет выведено число 2, второй элемент списка",
    "answer_01": "будет выведено число 1, первый элемент списка",
    "answer_02": "будет выведено число 2, второй элемент списка",
    "answer_03": "будет выведен весь список один раз",
    "answer_04": "будет выведен 0, так как порядок индексов списка начинается с 0",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 26,
  "fields": {
    "question": "Для чего нужен метод списка pop()?",
    "subject": 1,
    "author": "drf",
    "right_answer": "метод pop() удаляет элемент списка и возвращает его",
    "answer_01": "метод pop() полностью удаляет элемент списка, не возвращая ничего",
    "answer_02": "метод pop() считает, сколько раз каждый элемент встречается в списке",
    "answer_03": "метод pop() считает длину списка",
    "answer_04": "метод pop() удаляет элемент списка и возвращает его",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 27,
  "fields": {
    "question": "Что будет выведено на экран в результате действия метода pop()?",
    "subject": 1,
    "author": "drf",
    "right_answer": "3 и [1, 2]",
    "answer_01": "3 и [1, 2]",
    "answer_02": "[1, 2, 3] и [3, 2, 1]",
    "answer_03": "None и [1, 2, 3]",
    "answer_04": "0 и [1, 2, 3]",
    "difficulty_level": "NB",
    "available": true,
    "tag": "список",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
},
{
  "model": "questions.question",
  "pk": 28,
  "fields": {
    "question": "Что будет выведено на экран в результате выражения?",
    "subject": 1,
    "author": "drf",
    "right_answer": "1 и 1, обе переменных получат значение 1",
    "answer_01": "1 и None, переменная a получит значение 1, а переменная b будет не определена",
    "answer_02": "1 и 1, обе переменных получат значение 1",
    "answer_03": "получим ошибку NameError, так как переменная b не будет определена",
    "answer_04": "получим ошибку TypeError, так как такое присваивание значений невозможно",
    "difficulty_level": "NB",
    "available": true,
    "tag": "равенство",
    "image_01": "",
    "image_02": "",
    "image_03": ""
  }
}
]
